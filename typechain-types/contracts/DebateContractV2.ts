/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DebateContractV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateUserReward"
      | "claimReward"
      | "createDebate"
      | "debateCreationFee"
      | "debateToken"
      | "debates"
      | "endDebate"
      | "getDebate"
      | "getTotalDebates"
      | "getUserActiveDebate"
      | "getUserVote"
      | "hasUserVoted"
      | "maxStakeAmount"
      | "minStakeAmount"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeePercent"
      | "renounceOwnership"
      | "stakeAndVote"
      | "transferOwnership"
      | "unpause"
      | "updateCreationFee"
      | "updateMaxStake"
      | "updateMinStake"
      | "updatePlatformFee"
      | "userActiveDebates"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebateCreated"
      | "DebateEnded"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardClaimed"
      | "RewardsDistributed"
      | "StakePlaced"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateUserReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDebate",
    values: [string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debateCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debateToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endDebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveDebate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAndVote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userActiveDebates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDebate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveDebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userActiveDebates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DebateCreatedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    creator: AddressLike,
    title: string,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    debateId: bigint,
    creator: string,
    title: string,
    duration: bigint
  ];
  export interface OutputObject {
    debateId: bigint;
    creator: string;
    title: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebateEndedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    winningOption: BigNumberish,
    totalStaked: BigNumberish
  ];
  export type OutputTuple = [
    debateId: bigint,
    winningOption: bigint,
    totalStaked: bigint
  ];
  export interface OutputObject {
    debateId: bigint;
    winningOption: bigint;
    totalStaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [debateId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    debateId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [debateId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    debateId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakePlacedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    voter: AddressLike,
    optionIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    debateId: bigint,
    voter: string,
    optionIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    debateId: bigint;
    voter: string;
    optionIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DebateContractV2 extends BaseContract {
  connect(runner?: ContractRunner | null): DebateContractV2;
  waitForDeployment(): Promise<this>;

  interface: DebateContractV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateUserReward: TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  claimReward: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createDebate: TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  debateCreationFee: TypedContractMethod<[], [bigint], "view">;

  debateToken: TypedContractMethod<[], [string], "view">;

  debates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        totalStaked: bigint;
        startTime: bigint;
        endTime: bigint;
        ended: boolean;
        winningOption: bigint;
        platformFeeCollected: bigint;
      }
    ],
    "view"
  >;

  endDebate: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDebate: TypedContractMethod<
    [debateId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string[],
        bigint[],
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        options: string[];
        stakes: bigint[];
        totalStaked: bigint;
        startTime: bigint;
        endTime: bigint;
        ended: boolean;
        winningOption: bigint;
        platformFeeCollected: bigint;
      }
    ],
    "view"
  >;

  getTotalDebates: TypedContractMethod<[], [bigint], "view">;

  getUserActiveDebate: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserVote: TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        stake: bigint;
        option: bigint;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  maxStakeAmount: TypedContractMethod<[], [bigint], "view">;

  minStakeAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stakeAndVote: TypedContractMethod<
    [debateId: BigNumberish, optionIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCreationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxStake: TypedContractMethod<
    [newMaxStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinStake: TypedContractMethod<
    [newMinStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  userActiveDebates: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateUserReward"
  ): TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDebate"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debateCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debateToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        totalStaked: bigint;
        startTime: bigint;
        endTime: bigint;
        ended: boolean;
        winningOption: bigint;
        platformFeeCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endDebate"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDebate"
  ): TypedContractMethod<
    [debateId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string[],
        bigint[],
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        options: string[];
        stakes: bigint[];
        totalStaked: bigint;
        startTime: bigint;
        endTime: bigint;
        ended: boolean;
        winningOption: bigint;
        platformFeeCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalDebates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserActiveDebate"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserVote"
  ): TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        stake: bigint;
        option: bigint;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeAndVote"
  ): TypedContractMethod<
    [debateId: BigNumberish, optionIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCreationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxStake"
  ): TypedContractMethod<[newMaxStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinStake"
  ): TypedContractMethod<[newMinStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFeePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userActiveDebates"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DebateCreated"
  ): TypedContractEvent<
    DebateCreatedEvent.InputTuple,
    DebateCreatedEvent.OutputTuple,
    DebateCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DebateEnded"
  ): TypedContractEvent<
    DebateEndedEvent.InputTuple,
    DebateEndedEvent.OutputTuple,
    DebateEndedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "StakePlaced"
  ): TypedContractEvent<
    StakePlacedEvent.InputTuple,
    StakePlacedEvent.OutputTuple,
    StakePlacedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DebateCreated(uint256,address,string,uint256)": TypedContractEvent<
      DebateCreatedEvent.InputTuple,
      DebateCreatedEvent.OutputTuple,
      DebateCreatedEvent.OutputObject
    >;
    DebateCreated: TypedContractEvent<
      DebateCreatedEvent.InputTuple,
      DebateCreatedEvent.OutputTuple,
      DebateCreatedEvent.OutputObject
    >;

    "DebateEnded(uint256,uint256,uint256)": TypedContractEvent<
      DebateEndedEvent.InputTuple,
      DebateEndedEvent.OutputTuple,
      DebateEndedEvent.OutputObject
    >;
    DebateEnded: TypedContractEvent<
      DebateEndedEvent.InputTuple,
      DebateEndedEvent.OutputTuple,
      DebateEndedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardsDistributed(uint256,address,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "StakePlaced(uint256,address,uint256,uint256)": TypedContractEvent<
      StakePlacedEvent.InputTuple,
      StakePlacedEvent.OutputTuple,
      StakePlacedEvent.OutputObject
    >;
    StakePlaced: TypedContractEvent<
      StakePlacedEvent.InputTuple,
      StakePlacedEvent.OutputTuple,
      StakePlacedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
